{"version":3,"sources":["../src/textlint-rule-no-invalid-control-character.js"],"names":["execall","require","unicodeEscape","str","replace","c","charCodeAt","toString","substr","getName","matchChar","find","CONTROL_CHARACTER","code","char","name","DEFAULT_OPTION","allow","reporter","context","options","Syntax","RuleError","getSource","fixer","report","Str","node","text","controlCharacterPattern","results","forEach","index","result","sub","some","allowChar","ruleError","fix","removeRange","module","exports","linter"],"mappings":"AAAA;AACA;;AAGA;;;;AADA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;;;AAGA;;;;;AAKA,IAAMC,gBAAgB,SAAhBA,aAAgB,MAAO;AACzB,WAAOC,IAAIC,OAAJ,CAAY,IAAZ,EAAkB,aAAK;AAC1B,uBAAa,SAAMC,EAAEC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAN,EAAqCC,MAArC,CAA4C,CAAC,CAA7C,CAAb;AACH,KAFM,CAAP;AAGH,CAJD;;AAMA,IAAMC,UAAU,SAAVA,OAAU,OAAQ;AACpB,QAAMC,YAAY,uCAAmBC,IAAnB,CAAwB;AAAA,eAAqBC,kBAAkBC,IAAlB,KAA2BC,IAAhD;AAAA,KAAxB,CAAlB;AACA,QAAI,CAACJ,SAAL,EAAgB;AACZ,eAAO,EAAP;AACH;AACD,WAAOA,UAAUK,IAAjB;AACH,CAND;;AAQA,IAAMC,iBAAiB;AACnB;AACAC,WAAO;AAFY,CAAvB;AAIA;;;;;;;AAOA,IAAMC,WAAW,SAAXA,QAAW,CAACC,OAAD,EAA2B;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AAAA,QAChCC,MADgC,GACgBF,OADhB,CAChCE,MADgC;AAAA,QACxBC,SADwB,GACgBH,OADhB,CACxBG,SADwB;AAAA,QACbC,SADa,GACgBJ,OADhB,CACbI,SADa;AAAA,QACFC,KADE,GACgBL,OADhB,CACFK,KADE;AAAA,QACKC,MADL,GACgBN,OADhB,CACKM,MADL;;AAExC,QAAMR,QAAQG,QAAQH,KAAR,IAAiBD,eAAeC,KAA9C;AACA,+BACKI,OAAOK,GADZ,YACiBC,IADjB,EACuB;AACf,YAAMC,OAAOL,UAAUI,IAAV,CAAb;AACA;AACA,YAAME,0BAA0B,qCAAhC;AACA;;;AAGA,YAAMC,UAAU9B,QAAQ6B,uBAAR,EAAiCD,IAAjC,CAAhB;AACAE,gBAAQC,OAAR,CAAgB,kBAAU;AACtB,gBAAMC,QAAQC,OAAOD,KAArB;AACA,gBAAMlB,OAAOmB,OAAOC,GAAP,CAAW,CAAX,CAAb;AACA;AACA,gBAAIjB,MAAMkB,IAAN,CAAW;AAAA,uBAAaC,cAActB,IAA3B;AAAA,aAAX,CAAJ,EAAiD;AAC7C;AACH;AACD,gBAAMC,OAAON,QAAQK,IAAR,CAAb;AACA,gBAAMuB,YAAY,IAAIf,SAAJ,sCAAiDP,IAAjD,SAAyDb,cAAcY,IAAd,CAAzD,QAAiF;AAC/FkB,uBAAOA,KADwF;AAE/FM,qBAAKd,MAAMe,WAAN,CAAkB,CAACP,KAAD,EAAQA,QAAQ,CAAhB,CAAlB;AAF0F,aAAjF,CAAlB;AAIAP,mBAAOE,IAAP,EAAaU,SAAb;AACH,SAbD;AAcH,KAvBL;AAyBH,CA5BD;;AA8BAG,OAAOC,OAAP,GAAiB;AACbC,YAAQxB,QADK;AAEbM,WAAON;AAFM,CAAjB","file":"textlint-rule-no-invalid-control-character.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\n\nconst execall = require(\"execall\");\nimport { CONTROL_CHARACTERS } from \"./CONTROL_CHARACTERS\";\n\n/**\n * Convert char to \\uXXXX\n * @param {string} str\n * @return {string}\n */\nconst unicodeEscape = str => {\n    return str.replace(/./g, c => {\n        return `\\\\u${`000${c.charCodeAt(0).toString(16)}`.substr(-4)}`;\n    });\n};\n\nconst getName = char => {\n    const matchChar = CONTROL_CHARACTERS.find(CONTROL_CHARACTER => CONTROL_CHARACTER.code === char);\n    if (!matchChar) {\n        return \"\";\n    }\n    return matchChar.name;\n};\n\nconst DEFAULT_OPTION = {\n    // Define allow char code like `\\u0019`\n    allow: []\n};\n/**\n * @param {TextlintRuleContext} context\n * @param {{\n *  allow?:string[]\n * }} options\n * @returns {TextlintRuleCreator}\n */\nconst reporter = (context, options = {}) => {\n    const { Syntax, RuleError, getSource, fixer, report } = context;\n    const allow = options.allow || DEFAULT_OPTION.allow;\n    return {\n        [Syntax.Str](node) {\n            const text = getSource(node);\n            // Ignore \\r \\n \\t\n            const controlCharacterPattern = /([\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F])/g;\n            /**\n             * @type {Array<{match:string, sub:string[], index:number}>}\n             */\n            const results = execall(controlCharacterPattern, text);\n            results.forEach(result => {\n                const index = result.index;\n                const char = result.sub[0];\n                // if allow the `char`, ignore it\n                if (allow.some(allowChar => allowChar === char)) {\n                    return;\n                }\n                const name = getName(char);\n                const ruleError = new RuleError(`Found invalid control character(${name} ${unicodeEscape(char)})`, {\n                    index: index,\n                    fix: fixer.removeRange([index, index + 1])\n                });\n                report(node, ruleError);\n            });\n        }\n    };\n};\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}