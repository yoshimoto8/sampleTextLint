// MIT Â© 2017 azu
"use strict";

var _CONTROL_CHARACTERS = require("./CONTROL_CHARACTERS");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var execall = require("execall");


/**
 * Convert char to \uXXXX
 * @param {string} str
 * @return {string}
 */
var unicodeEscape = function unicodeEscape(str) {
    return str.replace(/./g, function (c) {
        return "\\u" + ("000" + c.charCodeAt(0).toString(16)).substr(-4);
    });
};

var getName = function getName(char) {
    var matchChar = _CONTROL_CHARACTERS.CONTROL_CHARACTERS.find(function (CONTROL_CHARACTER) {
        return CONTROL_CHARACTER.code === char;
    });
    if (!matchChar) {
        return "";
    }
    return matchChar.name;
};

var DEFAULT_OPTION = {
    // Define allow char code like `\u0019`
    allow: []
};
/**
 * @param {TextlintRuleContext} context
 * @param {{
 *  allow?:string[]
 * }} options
 * @returns {TextlintRuleCreator}
 */
var reporter = function reporter(context) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        getSource = context.getSource,
        fixer = context.fixer,
        report = context.report;

    var allow = options.allow || DEFAULT_OPTION.allow;
    return _defineProperty({}, Syntax.Str, function (node) {
        var text = getSource(node);
        // Ignore \r \n \t
        var controlCharacterPattern = /([\x00-\x08\x0B\x0C\x0E-\x1F\x7F])/g;
        /**
         * @type {Array<{match:string, sub:string[], index:number}>}
         */
        var results = execall(controlCharacterPattern, text);
        results.forEach(function (result) {
            var index = result.index;
            var char = result.sub[0];
            // if allow the `char`, ignore it
            if (allow.some(function (allowChar) {
                return allowChar === char;
            })) {
                return;
            }
            var name = getName(char);
            var ruleError = new RuleError("Found invalid control character(" + name + " " + unicodeEscape(char) + ")", {
                index: index,
                fix: fixer.removeRange([index, index + 1])
            });
            report(node, ruleError);
        });
    });
};

module.exports = {
    linter: reporter,
    fixer: reporter
};
//# sourceMappingURL=textlint-rule-no-invalid-control-character.js.map