{"version":3,"sources":["../src/textlint-rule-prh.js"],"names":["RegExp","prototype","flags","undefined","Object","defineProperty","configurable","get","toString","match","prh","require","path","untildify","createPrhEngine","rulePaths","baseDir","length","expandedRulePaths","map","rulePath","prhEngine","fromYAMLFilePath","resolve","slice","forEach","config","ruleFilePath","merge","createPrhEngineFromContents","yamlContents","dummyFilePath","fromYAML","content","mergePrh","engines","engines_","filter","engine","mainEngine","assertOptions","options","ruleContents","Error","forEachChange","changeSet","str","onChangeOfMatch","sortedDiffs","diffs","sort","a","b","index","delta","diff","result","expected","replace","g1","parseInt","matches","matchStartIndex","matchEndIndex","actual","getConfigBaseDir","context","process","cwd","textlintRcFilePath","configFile","dirname","reporter","textlintRCDir","prhEngineContent","prhEngineFiles","helper","Syntax","getSource","report","fixer","RuleError","Str","node","isChildNode","Link","Image","BlockQuote","Emphasis","text","makeChangeSet","messages","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;;AACA;;;;AACA;;;AAGA,IAAIA,OAAOC,SAAP,CAAiBC,KAAjB,KAA2BC,SAA/B,EAA0C;AACtCC,WAAOC,cAAP,CAAsBL,OAAOC,SAA7B,EAAwC,OAAxC,EAAiD;AAC7CK,sBAAc,IAD+B;AAE7CC,aAAK,eAAW;AACZ,mBAAO,KAAKC,QAAL,GAAgBC,KAAhB,CAAsB,WAAtB,EAAmC,CAAnC,CAAP;AACH;AAJ4C,KAAjD;AAMH;;AAED,IAAMC,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,YAAYF,QAAQ,WAAR,CAAlB;;AAEA,SAASG,eAAT,CAAyBC,SAAzB,EAAoCC,OAApC,EAA6C;AACzC,QAAID,UAAUE,MAAV,KAAqB,CAAzB,EAA4B;AACxB,eAAO,IAAP;AACH;AACD,QAAMC,oBAAoBH,UAAUI,GAAV,CAAc;AAAA,eAAYN,UAAUO,QAAV,CAAZ;AAAA,KAAd,CAA1B;AACA,QAAMC,YAAYX,IAAIY,gBAAJ,CAAqBV,KAAKW,OAAL,CAAaP,OAAb,EAAsBE,kBAAkB,CAAlB,CAAtB,CAArB,CAAlB;AACAA,sBAAkBM,KAAlB,CAAwB,CAAxB,EAA2BC,OAA3B,CAAmC,wBAAgB;AAC/C,YAAMC,SAAShB,IAAIY,gBAAJ,CAAqBV,KAAKW,OAAL,CAAaP,OAAb,EAAsBW,YAAtB,CAArB,CAAf;AACAN,kBAAUO,KAAV,CAAgBF,MAAhB;AACH,KAHD;AAIA,WAAOL,SAAP;AACH;;AAED,SAASQ,2BAAT,CAAqCC,YAArC,EAAmD;AAC/C,QAAIA,aAAab,MAAb,KAAwB,CAA5B,EAA+B;AAC3B,eAAO,IAAP;AACH;AACD,QAAMc,gBAAgB,EAAtB;AACA,QAAMV,YAAYX,IAAIsB,QAAJ,CAAaD,aAAb,EAA4BD,aAAa,CAAb,CAA5B,CAAlB;AACAA,iBAAaN,KAAb,CAAmB,CAAnB,EAAsBC,OAAtB,CAA8B,mBAAW;AACrC,YAAMC,SAAShB,IAAIsB,QAAJ,CAAaD,aAAb,EAA4BE,OAA5B,CAAf;AACAZ,kBAAUO,KAAV,CAAgBF,MAAhB;AACH,KAHD;AAIA,WAAOL,SAAP;AACH;;AAED,SAASa,QAAT,GAA8B;AAAA,sCAATC,OAAS;AAATA,eAAS;AAAA;;AAC1B,QAAMC,WAAWD,QAAQE,MAAR,CAAe;AAAA,eAAU,CAAC,CAACC,MAAZ;AAAA,KAAf,CAAjB;AACA,QAAMC,aAAaH,SAAS,CAAT,CAAnB;AACAA,aAASZ,KAAT,CAAe,CAAf,EAAkBC,OAAlB,CAA0B,kBAAU;AAChCc,mBAAWX,KAAX,CAAiBU,MAAjB;AACH,KAFD;AAGA,WAAOC,UAAP;AACH;;AAED,IAAMC,gBAAgB,SAAhBA,aAAgB,UAAW;AAC7B,QAAI,OAAOC,QAAQC,YAAf,KAAgC,WAAhC,IAA+C,OAAOD,QAAQ1B,SAAf,KAA6B,WAAhF,EAA6F;AACzF,cAAM,IAAI4B,KAAJ,qLAAN;AAUH;AACJ,CAbD;;AAeA;;;;;;;;;;;AAWA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,SAAD,EAAYC,GAAZ,EAAiBC,eAAjB,EAAqC;AACvD,QAAMC,cAAcH,UAAUI,KAAV,CAAgBC,IAAhB,CAAqB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACpD,eAAOD,EAAEE,KAAF,GAAUD,EAAEC,KAAnB;AACH,KAFmB,CAApB;AAGA,QAAIC,QAAQ,CAAZ;AACAN,gBAAYvB,OAAZ,CAAoB,UAAS8B,IAAT,EAAe;AAC/B,YAAMC,SAASD,KAAKE,QAAL,CAAcC,OAAd,CAAsB,iBAAtB,EAAyC,UAASjD,KAAT,EAAgBkD,EAAhB,EAAoB;AACxE,gBAAMN,QAAQO,SAASD,EAAT,CAAd;AACA,gBAAIN,UAAU,CAAV,IAAeE,KAAKM,OAAL,CAAa5C,MAAb,GAAsB,CAAtB,GAA0BoC,KAA7C,EAAoD;AAChD,uBAAO5C,KAAP;AACH;AACD,mBAAO8C,KAAKM,OAAL,CAAaR,KAAb,KAAuB,EAA9B;AACH,SANc,CAAf;AAOA;AACA;AACA,YAAMS,kBAAkBP,KAAKF,KAA7B;AACA,YAAMU,gBAAgBD,kBAAkBP,KAAKM,OAAL,CAAa,CAAb,EAAgB5C,MAAxD;AACA;AACA,YAAM+C,SAASlB,IAAItB,KAAJ,CAAU+B,KAAKF,KAAL,GAAaC,KAAvB,EAA8BC,KAAKF,KAAL,GAAaC,KAAb,GAAqBC,KAAKM,OAAL,CAAa,CAAb,EAAgB5C,MAAnE,CAAf;AACA8B,wBAAgB;AACZe,4CADY;AAEZC,wCAFY;AAGZC,oBAAQA,MAHI;AAIZP,sBAAUD;AAJE,SAAhB;AAMAV,cAAMA,IAAItB,KAAJ,CAAU,CAAV,EAAa+B,KAAKF,KAAL,GAAaC,KAA1B,IAAmCE,MAAnC,GAA4CV,IAAItB,KAAJ,CAAU+B,KAAKF,KAAL,GAAaC,KAAb,GAAqBC,KAAKM,OAAL,CAAa,CAAb,EAAgB5C,MAA/C,CAAlD;AACAqC,iBAASE,OAAOvC,MAAP,GAAgBsC,KAAKM,OAAL,CAAa,CAAb,EAAgB5C,MAAzC;AACH,KAtBD;AAuBH,CA5BD;AA6BA,IAAMgD,mBAAmB,SAAnBA,gBAAmB,UAAW;AAChC,QAAI,OAAOC,QAAQD,gBAAf,KAAoC,UAAxC,EAAoD;AAChD,eAAOC,QAAQD,gBAAR,MAA8BE,QAAQC,GAAR,EAArC;AACH;AACD;AACA;AACA,QAAMC,qBAAqBH,QAAQxC,MAAR,GAAiBwC,QAAQxC,MAAR,CAAe4C,UAAhC,GAA6C,IAAxE;AACA;AACA,WAAOD,qBAAqBzD,KAAK2D,OAAL,CAAaF,kBAAb,CAArB,GAAwDF,QAAQC,GAAR,EAA/D;AACH,CATD;;AAWA,SAASI,QAAT,CAAkBN,OAAlB,EAAyC;AAAA,QAAdzB,OAAc,uEAAJ,EAAI;;AACrCD,kBAAcC,OAAd;AACA;AACA,QAAMgC,gBAAgBR,iBAAiBC,OAAjB,CAAtB;AACA;AACA,QAAMnD,YAAY0B,QAAQ1B,SAAR,IAAqB,EAAvC;AACA,QAAM2B,eAAeD,QAAQC,YAAR,IAAwB,EAA7C;AACA;AACA,QAAMgC,mBAAmB7C,4BAA4Ba,YAA5B,CAAzB;AACA,QAAMiC,iBAAiB7D,gBAAgBC,SAAhB,EAA2B0D,aAA3B,CAAvB;AACA,QAAMpD,YAAYa,SAASyC,cAAT,EAAyBD,gBAAzB,CAAlB;AACA,QAAME,SAAS,mCAAeV,OAAf,CAAf;AAXqC,QAY7BW,MAZ6B,GAYmBX,OAZnB,CAY7BW,MAZ6B;AAAA,QAYrBC,SAZqB,GAYmBZ,OAZnB,CAYrBY,SAZqB;AAAA,QAYVC,MAZU,GAYmBb,OAZnB,CAYVa,MAZU;AAAA,QAYFC,KAZE,GAYmBd,OAZnB,CAYFc,KAZE;AAAA,QAYKC,SAZL,GAYmBf,OAZnB,CAYKe,SAZL;;AAarC,+BACKJ,OAAOK,GADZ,YACiBC,IADjB,EACuB;AACf,YAAIP,OAAOQ,WAAP,CAAmBD,IAAnB,EAAyB,CAACN,OAAOQ,IAAR,EAAcR,OAAOS,KAArB,EAA4BT,OAAOU,UAAnC,EAA+CV,OAAOW,QAAtD,CAAzB,CAAJ,EAA+F;AAC3F;AACH;AACD,YAAMC,OAAOX,UAAUK,IAAV,CAAb;AACA;AACA;AACA,YAAMpD,gBAAgB,EAAtB;AACA,YAAM2D,gBAAgBrE,UAAUqE,aAAV,CAAwB3D,aAAxB,EAAuC0D,IAAvC,CAAtB;AACA7C,sBAAc8C,aAAd,EAA6BD,IAA7B,EAAmC,gBAA0D;AAAA,gBAAvD3B,eAAuD,QAAvDA,eAAuD;AAAA,gBAAtCC,aAAsC,QAAtCA,aAAsC;AAAA,gBAAvBC,MAAuB,QAAvBA,MAAuB;AAAA,gBAAfP,QAAe,QAAfA,QAAe;;AACzF;AACA,gBAAIO,WAAWP,QAAf,EAAyB;AACrB;AACH;;AAED,gBAAMkC,WAAW3B,SAAS,MAAT,GAAkBP,QAAnC;AACAsB,mBACII,IADJ,EAEI,IAAIF,SAAJ,CAAcU,QAAd,EAAwB;AACpBtC,uBAAOS,eADa;AAEpB8B,qBAAKZ,MAAMa,gBAAN,CAAuB,CAAC/B,eAAD,EAAkBC,aAAlB,CAAvB,EAAyDN,QAAzD;AAFe,aAAxB,CAFJ;AAOH,SAdD;AAeH,KAzBL;AA2BH;;AAEDqC,OAAOC,OAAP,GAAiB;AACbC,YAAQxB,QADK;AAEbQ,WAAOR;AAFM,CAAjB","file":"textlint-rule-prh.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper } from \"textlint-rule-helper\";\n/**\n * RegExp#flags polyfill\n */\nif (RegExp.prototype.flags === undefined) {\n    Object.defineProperty(RegExp.prototype, \"flags\", {\n        configurable: true,\n        get: function() {\n            return this.toString().match(/[gimuy]*$/)[0];\n        }\n    });\n}\n\nconst prh = require(\"prh\");\nconst path = require(\"path\");\nconst untildify = require(\"untildify\");\n\nfunction createPrhEngine(rulePaths, baseDir) {\n    if (rulePaths.length === 0) {\n        return null;\n    }\n    const expandedRulePaths = rulePaths.map(rulePath => untildify(rulePath));\n    const prhEngine = prh.fromYAMLFilePath(path.resolve(baseDir, expandedRulePaths[0]));\n    expandedRulePaths.slice(1).forEach(ruleFilePath => {\n        const config = prh.fromYAMLFilePath(path.resolve(baseDir, ruleFilePath));\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction createPrhEngineFromContents(yamlContents) {\n    if (yamlContents.length === 0) {\n        return null;\n    }\n    const dummyFilePath = \"\";\n    const prhEngine = prh.fromYAML(dummyFilePath, yamlContents[0]);\n    yamlContents.slice(1).forEach(content => {\n        const config = prh.fromYAML(dummyFilePath, content);\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction mergePrh(...engines) {\n    const engines_ = engines.filter(engine => !!engine);\n    const mainEngine = engines_[0];\n    engines_.slice(1).forEach(engine => {\n        mainEngine.merge(engine);\n    });\n    return mainEngine;\n}\n\nconst assertOptions = options => {\n    if (typeof options.ruleContents === \"undefined\" && typeof options.rulePaths === \"undefined\") {\n        throw new Error(`textlint-rule-prh require Rule Options.\nPlease set .textlinrc:\n{\n    \"rules\": {\n        \"prh\": {\n            \"rulePaths\" :[\"path/to/prh.yml\"]\n        }\n    }\n}\n`);\n    }\n};\n\n/**\n * for each diff of changeSet\n * @param {ChangeSet} changeSet\n * @param {string} str\n * @param {function({\n            matchStartIndex: number,\n            matchEndIndex: number,\n            actual: string\n            expected: string\n        })}onChangeOfMatch\n */\nconst forEachChange = (changeSet, str, onChangeOfMatch) => {\n    const sortedDiffs = changeSet.diffs.sort(function(a, b) {\n        return a.index - b.index;\n    });\n    let delta = 0;\n    sortedDiffs.forEach(function(diff) {\n        const result = diff.expected.replace(/\\$([0-9]{1,2})/g, function(match, g1) {\n            const index = parseInt(g1);\n            if (index === 0 || diff.matches.length - 1 < index) {\n                return match;\n            }\n            return diff.matches[index] || \"\";\n        });\n        // matchStartIndex/matchEndIndex value is original position, not replaced position\n        // textlint use original position\n        const matchStartIndex = diff.index;\n        const matchEndIndex = matchStartIndex + diff.matches[0].length;\n        // actual => expected\n        const actual = str.slice(diff.index + delta, diff.index + delta + diff.matches[0].length);\n        onChangeOfMatch({\n            matchStartIndex,\n            matchEndIndex,\n            actual: actual,\n            expected: result\n        });\n        str = str.slice(0, diff.index + delta) + result + str.slice(diff.index + delta + diff.matches[0].length);\n        delta += result.length - diff.matches[0].length;\n    });\n};\nconst getConfigBaseDir = context => {\n    if (typeof context.getConfigBaseDir === \"function\") {\n        return context.getConfigBaseDir() || process.cwd();\n    }\n    // Old fallback that use deprecated `config` value\n    // https://github.com/textlint/textlint/issues/294\n    const textlintRcFilePath = context.config ? context.config.configFile : null;\n    // .textlinrc directory\n    return textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n};\n\nfunction reporter(context, options = {}) {\n    assertOptions(options);\n    // .textlinrc directory\n    const textlintRCDir = getConfigBaseDir(context);\n    // create prh config\n    const rulePaths = options.rulePaths || [];\n    const ruleContents = options.ruleContents || [];\n    // yaml file + yaml contents\n    const prhEngineContent = createPrhEngineFromContents(ruleContents);\n    const prhEngineFiles = createPrhEngine(rulePaths, textlintRCDir);\n    const prhEngine = mergePrh(prhEngineFiles, prhEngineContent);\n    const helper = new RuleHelper(context);\n    const { Syntax, getSource, report, fixer, RuleError } = context;\n    return {\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            // to get position from index\n            // https://github.com/prh/prh/issues/29\n            const dummyFilePath = \"\";\n            const makeChangeSet = prhEngine.makeChangeSet(dummyFilePath, text);\n            forEachChange(makeChangeSet, text, ({ matchStartIndex, matchEndIndex, actual, expected }) => {\n                // If result is not changed, should not report\n                if (actual === expected) {\n                    return;\n                }\n\n                const messages = actual + \" => \" + expected;\n                report(\n                    node,\n                    new RuleError(messages, {\n                        index: matchStartIndex,\n                        fix: fixer.replaceTextRange([matchStartIndex, matchEndIndex], expected)\n                    })\n                );\n            });\n        }\n    };\n}\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}